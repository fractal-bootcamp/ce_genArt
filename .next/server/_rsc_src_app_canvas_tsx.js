"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_app_canvas_tsx";
exports.ids = ["_rsc_src_app_canvas_tsx"];
exports.modules = {

/***/ "(rsc)/./src/app/canvas.tsx":
/*!****************************!*\
  !*** ./src/app/canvas.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CanvasComponent: () => (/* binding */ e0)\n/* harmony export */ });\n/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js\");\n\n\nconst e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/cort/coding/wk5/ce_genArt/src/app/canvas.tsx#CanvasComponent`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2NhbnZhcy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW5hcnRfc2l0ZS8uL3NyYy9hcHAvY2FudmFzLnRzeD8wYjk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbmRlciBjbGllbnQgc2lkZSBvbmx5XG5cInVzZSBjbGllbnRcIjtcblxuLy8gaW1wb3J0IGRlcGVuZGVuY2llc1xuaW1wb3J0IGR5bmFtaWMgZnJvbSBcIm5leHQvZHluYW1pY1wiO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBTdXNwZW5zZSwgdXNlUmVmLCB1c2VTdGF0ZSwgTXV0YWJsZVJlZk9iamVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRnJhbWUsIENhbnZhcywgdXNlTG9hZGVyLCBleHRlbmQgfSBmcm9tIFwiQHJlYWN0LXRocmVlL2ZpYmVyXCI7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzLCBQZXJzcGVjdGl2ZUNhbWVyYSB9IGZyb20gXCJAcmVhY3QtdGhyZWUvZHJlaVwiO1xuaW1wb3J0IHsgTWVzaCwgVGV4dHVyZUxvYWRlciwgU2hhZGVyTWF0ZXJpYWwgfSBmcm9tIFwidGhyZWVcIjtcblxuLy8gaW1wb3J0IGN1c3RvbSBzaGFkZXIgbWF0ZXJpYWwgd2l0aCBpdHMgdHlwZVxuaW1wb3J0IHsgTm9pc2VTaGFkZXJNYXRlcmlhbCwgTm9pc2VTaGFkZXJNYXRlcmlhbFR5cGUgfSBmcm9tIFwiLi9tYXRlcmlhbFwiO1xuXG5leHRlbmQoeyBOb2lzZVNoYWRlck1hdGVyaWFsIH0pO1xuXG4vLyBJbXBvcnQgY29udHJvbHMgd2l0aCBTU1IgZGlzYWJsZWRcbmNvbnN0IFNoYWRlckNvbnRyb2xzID0gZHluYW1pYygoKSA9PiBpbXBvcnQoXCIuL3NoYWRlckNvbnRyb2xzXCIpLCB7XG4gIHNzcjogZmFsc2UsXG59KTtcblxuLy8gZGVmaW5lIHR5cGVzIGZvciByb3RhdGluZyBzY2VuZVxuaW50ZXJmYWNlIFJvdGF0ZVNjZW5lUHJvcHMge1xuICBwb3NpdGlvbjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICBzY2FsZT86IG51bWJlcjtcbiAgcm93SW5kZXg6IG51bWJlcjtcbiAgY29sSW5kZXg6IG51bWJlcjtcbiAgZGVwdGhJbmRleDogbnVtYmVyO1xuICBncmlkU3BhY2luZzogbnVtYmVyOyAvLyBBZGRlZCB0byBzdXBwb3J0IGR5bmFtaWMgZ3JpZCBzcGFjaW5nXG59XG5cbi8vIHJvdGF0aW5nIHNjZW5lIGNvbXBvbmVudCAtIGRlZmluZXMgM0Qgb2JqZWN0c1xuZnVuY3Rpb24gUm90YXRlU2NlbmUoe1xuICBwb3NpdGlvbixcbiAgc2NhbGUgPSAxLFxuICByb3dJbmRleCxcbiAgY29sSW5kZXgsXG4gIGRlcHRoSW5kZXgsXG4gIGdyaWRTcGFjaW5nLCAvLyBBZGQgZ3JpZFNwYWNpbmcgdG8gcHJvcHNcbn06IFJvdGF0ZVNjZW5lUHJvcHMpIHtcbiAgLy8gcmVmcyB0byBhY2Nlc3MgbWVzaCBhbmQgbWF0ZXJpYWwgaW5zdGFuY2VzXG4gIGNvbnN0IG1lc2hSb3RhdGUgPSB1c2VSZWY8TWVzaD4obnVsbCk7XG4gIC8vIFVwZGF0ZSBtYXRlcmlhbCByZWYgdHlwZSB0byB1c2UgTm9pc2VTaGFkZXJNYXRlcmlhbFR5cGVcbiAgY29uc3QgbWF0ZXJpYWxSZWYgPSB1c2VSZWY8Tm9pc2VTaGFkZXJNYXRlcmlhbFR5cGU+KG51bGwpO1xuICAvLyBzdGF0ZSBmb3IgaG92ZXIgYW5kIGNsaWNrIGludGVyYWN0aW9uc1xuICBjb25zdCBbaG92ZXJlZCwgc2V0SG92ZXJlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjbGlja2VkLCBzZXRDbGlja2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBhbmltYXRpb24gZnJhbWUgbG9vcFxuICB1c2VGcmFtZSgoc3RhdGUpID0+IHtcbiAgICBpZiAobWVzaFJvdGF0ZS5jdXJyZW50KSB7XG4gICAgICBtZXNoUm90YXRlLmN1cnJlbnQucm90YXRpb24ueSArPSAwLjAxO1xuICAgICAgaWYgKGNsaWNrZWQpIHtcbiAgICAgICAgbWVzaFJvdGF0ZS5jdXJyZW50LnJvdGF0aW9uLnkgKz0gMC4wNTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsUmVmLmN1cnJlbnQgJiYgbWF0ZXJpYWxSZWYuY3VycmVudC51bmlmb3Jtcykge1xuICAgICAgbWF0ZXJpYWxSZWYuY3VycmVudC51bmlmb3Jtcy50aW1lLnZhbHVlID0gc3RhdGUuY2xvY2suZWxhcHNlZFRpbWU7XG4gICAgICBtYXRlcmlhbFJlZi5jdXJyZW50LnVuaWZvcm1zLnBvc2l0aW9uSW5kZXgudmFsdWUuc2V0KGNvbEluZGV4LCByb3dJbmRleCk7XG4gICAgICBtYXRlcmlhbFJlZi5jdXJyZW50LnVuaWZvcm1zLnRvdGFsQ3ViZXMudmFsdWUuc2V0KDUwLCA1MCk7XG4gICAgICBtYXRlcmlhbFJlZi5jdXJyZW50LnVuaWZvcm1zLmRlcHRoSW5kZXgudmFsdWUgPSBkZXB0aEluZGV4O1xuICAgICAgbWF0ZXJpYWxSZWYuY3VycmVudC51bmlmb3Jtcy5ncmlkU3BhY2luZy52YWx1ZSA9IGdyaWRTcGFjaW5nO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bWVzaFxuICAgICAgcmVmPXttZXNoUm90YXRlfVxuICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgb25DbGljaz17KGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyAvLyBQcmV2ZW50IGV2ZW50IGJ1YmJsaW5nXG4gICAgICAgIHNldENsaWNrZWQoIWNsaWNrZWQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkN1YmUgY2xpY2tlZCFcIik7IC8vIEFkZCB0aGlzIHRvIGRlYnVnXG4gICAgICB9fVxuICAgICAgb25Qb2ludGVyT3Zlcj17KGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRIb3ZlcmVkKHRydWUpO1xuICAgICAgfX1cbiAgICAgIG9uUG9pbnRlck91dD17KGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRIb3ZlcmVkKGZhbHNlKTtcbiAgICAgIH19XG4gICAgICBzY2FsZT17aG92ZXJlZCA/IHNjYWxlICogMS4zIDogc2NhbGV9XG4gICAgICBjYXN0U2hhZG93XG4gICAgICByZWNlaXZlU2hhZG93XG4gICAgPlxuICAgICAgPGJveEdlb21ldHJ5IGFyZ3M9e1syLCAyLCAyXX0gLz5cbiAgICAgIDxub2lzZVNoYWRlck1hdGVyaWFsXG4gICAgICAgIHJlZj17bWF0ZXJpYWxSZWZ9XG4gICAgICAgIHRyYW5zcGFyZW50XG4gICAgICAgIGRlcHRoV3JpdGU9e3RydWV9XG4gICAgICAgIGF0dGFjaD1cIm1hdGVyaWFsXCJcbiAgICAgIC8+XG4gICAgPC9tZXNoPlxuICApO1xufVxuXG4vLyBtYWluIGNhbnZhcyBjb21wb25lbnRcbmV4cG9ydCBmdW5jdGlvbiBDYW52YXNDb21wb25lbnQoKSB7XG4gIC8vIFVwZGF0ZSBtYXRlcmlhbCByZWYgdG8gdXNlIE5vaXNlU2hhZGVyTWF0ZXJpYWxUeXBlXG4gIGNvbnN0IG1hdGVyaWFsUmVmID0gdXNlUmVmPE5vaXNlU2hhZGVyTWF0ZXJpYWxUeXBlPihudWxsKTtcbiAgLy8gQWRkIHN0YXRlIGZvciBncmlkIHNwYWNpbmdcbiAgY29uc3QgW2dyaWRTcGFjaW5nLCBzZXRHcmlkU3BhY2luZ10gPSB1c2VTdGF0ZSgyLjApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDB2d1wiIH19PlxuICAgICAgPENhbnZhcyBzaGFkb3dzIGdsPXt7IGFudGlhbGlhczogdHJ1ZSB9fT5cbiAgICAgICAgey8qIENhbWVyYSBzZXR1cCAqL31cbiAgICAgICAgPFBlcnNwZWN0aXZlQ2FtZXJhIG1ha2VEZWZhdWx0IHBvc2l0aW9uPXtbMCwgMjAsIDEwMF19IGZvdj17NjB9IC8+XG5cbiAgICAgICAgey8qIExpZ2h0aW5nICovfVxuICAgICAgICA8YW1iaWVudExpZ2h0IGludGVuc2l0eT17MC41fSAvPlxuICAgICAgICA8cG9pbnRMaWdodCBwb3NpdGlvbj17WzEwLCAxMCwgNl19IGNvbG9yPVwicmVkXCIgLz5cblxuICAgICAgICB7LyogR3JvdW5kIHBsYW5lIHdpdGggdXBkYXRlZCBtYXRlcmlhbCByZWYgKi99XG4gICAgICAgIDxtZXNoXG4gICAgICAgICAgcm90YXRpb249e1stTWF0aC5QSSAvIDIsIDAsIDBdfVxuICAgICAgICAgIHBvc2l0aW9uPXtbMCwgLTIwLCAwXX1cbiAgICAgICAgICByZWNlaXZlU2hhZG93XG4gICAgICAgID5cbiAgICAgICAgICA8bm9pc2VTaGFkZXJNYXRlcmlhbFxuICAgICAgICAgICAgcmVmPXttYXRlcmlhbFJlZn1cbiAgICAgICAgICAgIHRyYW5zcGFyZW50XG4gICAgICAgICAgICBkZXB0aFdyaXRlPXt0cnVlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbWVzaD5cblxuICAgICAgICB7LyogM0QgZ3JpZCBvZiBjdWJlcyAtIG5vdyB3aXRoIGR5bmFtaWMgc3BhY2luZyAqL31cbiAgICAgICAge0FycmF5LmZyb20oeyBsZW5ndGg6IDMgfSkubWFwKChfLCBkZXB0aEluZGV4KSA9PlxuICAgICAgICAgIEFycmF5LmZyb20oeyBsZW5ndGg6IDUwIH0pLm1hcCgoXywgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gMSAtIHJvd0luZGV4ICogMC4wNTtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiA1MCB9KS5tYXAoKF8sIGNvbEluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDxSb3RhdGVTY2VuZVxuICAgICAgICAgICAgICAgIGtleT17YCR7ZGVwdGhJbmRleH0tJHtyb3dJbmRleH0tJHtjb2xJbmRleH1gfVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uPXtbXG4gICAgICAgICAgICAgICAgICAoY29sSW5kZXggLSAyNSkgKiBncmlkU3BhY2luZywgLy8gWCBwb3NpdGlvbiB3aXRoIGR5bmFtaWMgc3BhY2luZ1xuICAgICAgICAgICAgICAgICAgKHJvd0luZGV4IC0gMjUpICogZ3JpZFNwYWNpbmcsIC8vIFkgcG9zaXRpb24gd2l0aCBkeW5hbWljIHNwYWNpbmdcbiAgICAgICAgICAgICAgICAgIChkZXB0aEluZGV4IC0gMSkgKiAxMCwgLy8gWiBwb3NpdGlvbiAoZGVwdGgpXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICBzY2FsZT17c2NhbGV9XG4gICAgICAgICAgICAgICAgcm93SW5kZXg9e3Jvd0luZGV4fVxuICAgICAgICAgICAgICAgIGNvbEluZGV4PXtjb2xJbmRleH1cbiAgICAgICAgICAgICAgICBkZXB0aEluZGV4PXtkZXB0aEluZGV4fVxuICAgICAgICAgICAgICAgIGdyaWRTcGFjaW5nPXtncmlkU3BhY2luZ30gLy8gUGFzcyBncmlkU3BhY2luZyB0byBSb3RhdGVTY2VuZVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKX1cblxuICAgICAgICB7LyogQ2FtZXJhIGNvbnRyb2xzICovfVxuICAgICAgICA8T3JiaXRDb250cm9sc1xuICAgICAgICAgIGVuYWJsZVBhbj17ZmFsc2V9XG4gICAgICAgICAgbWluRGlzdGFuY2U9ezEwfVxuICAgICAgICAgIG1heERpc3RhbmNlPXsxMDB9XG4gICAgICAgICAgbWluUG9sYXJBbmdsZT17TWF0aC5QSSAvIDR9XG4gICAgICAgICAgbWF4UG9sYXJBbmdsZT17TWF0aC5QSSAvIDEuNX1cbiAgICAgICAgICB0YXJnZXQ9e1swLCAwLCAwXX1cbiAgICAgICAgLz5cblxuICAgICAgICB7LyogU2NlbmUgZm9nIGZvciBkZXB0aCBlZmZlY3QgKi99XG4gICAgICAgIDxmb2cgYXR0YWNoPVwiZm9nXCIgYXJncz17W1wiIzAwMDAwMFwiLCA0MCwgMjAwXX0gLz5cbiAgICAgIDwvQ2FudmFzPlxuXG4gICAgICB7LyogU2hhZGVyIGNvbnRyb2xzIHBhbmVsIC0gbm93IHByb3Blcmx5IHR5cGVkIGFuZCB3aXRoIGdyaWQgc3BhY2luZyBjb250cm9scyAqL31cbiAgICAgIDxTaGFkZXJDb250cm9sc1xuICAgICAgICBtYXRlcmlhbFJlZj17bWF0ZXJpYWxSZWZ9XG4gICAgICAgIGdyaWRTcGFjaW5nPXtncmlkU3BhY2luZ31cbiAgICAgICAgc2V0R3JpZFNwYWNpbmc9e3NldEdyaWRTcGFjaW5nfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/canvas.tsx\n");

/***/ })

};
;